wt_fits_sigs_pos = wt_fits_sigs_pos,
strains=strains
)
)
View(alldata_df)
render('Stage1HTMLGenerator.Rmd',
output_file = output_file,
params = list(
all_plots_file=all_plots_file,
neg_data = neg_data,
neg_data.corrected = neg_data.corrected,
neg_data_levels = neg_data_levels,
wt_fits_sigs_neg = wt_fits_sigs_neg,
pos_data = pos_data,
pos_data.corrected = pos_data.corrected,
pos_data_levels = pos_data_levels,
wt_fits_sigs_pos = wt_fits_sigs_pos,
strains=strains
)
)
View(all_plots)
View(alldata_df)
# For processing a single batch of either NEG or POS
# Important inputs
# SIGN : Type of data, POS or NEG
# DATA_FOLDER : The folder for saving generated files and intermediate data
# data_file : results csv file
# runorder_file: run order file
# first : 1st column in the results file with Area data
# last : last column in the results file with Area data
# Type of data (POS/NEG/ALL)
DATA_TYPE <- "ALL"
# set the working directory
setwd('D:/R_Analysis/LCMS_SerumAnalysis-main - simple')
# Master input and output data folders
BATCH_DATA_INPUT_FOLDER <- "D:/R_Analysis/LC_MS_Data/ASKA"
BATCH_DATA_OUTPUT_FOLDER <- "D:/R_Analysis/output_files/ASKA"
# batch number
BATCH = 2
# common batch data output folder
DATA_FOLDER <- paste(BATCH_DATA_OUTPUT_FOLDER,"/Batch_",BATCH, "/",sep="")
# Set the filenames
neg_data_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_NEG/Batch_", BATCH,"/Results.csv", sep="" )
neg_runorder_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_NEG/Batch_", BATCH,"/RunOrder.csv", sep="" )
pos_data_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_POS/Batch_", BATCH,"/Results.csv", sep="" )
pos_runorder_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_POS/Batch_", BATCH,"/RunOrder.csv", sep="" )
# Import data
neg_data <- read.csv(neg_data_file, sep=";", dec=",")
# Import data
neg_data <- read.csv(neg_data_file, sep=";", dec=",")
# Import data
neg_data <- read.csv(neg_data_file, sep=",", dec=",")
neg_run_order <- read.csv(neg_runorder_file, sep=",", dec=",", skip=1)
pos_data <- read.csv(pos_data_file, sep=",", dec=",")
pos_run_order <- read.csv(pos_runorder_file, sep=",", dec=",", skip=1)
names(neg_data)
names(pos_data)
# set the columns indexes, important!
neg_first <- 28
neg_last <- 133
pos_first <- 28
pos_last <- 133
# preprocess the files, making necessary corrections, ammendments and  get the strains
source("Preprocessor.KEIO.R")
# get the strains
strains <- detect_strains(neg_run_order)
strains
# slice target columns
neg_data <- neg_data[c(1:neg_last)]
# normalize column names
results <- normalize_data(strains, neg_data, neg_run_order, neg_first)
neg_data = results[[1]]
neg_run_order = results[[2]]
neg_last = ncol(neg_data)
pos_data <- pos_data[c(1:pos_last)]
# normalize column names
results <- normalize_data(strains, pos_data, pos_run_order, pos_first)
pos_data = results[[1]]
pos_run_order = results[[2]]
pos_last = ncol(pos_data)
# prepare the data for the batch above. Runs loess correction and fitting
source('PrepareData.R')
# save data
SIGN = DATA_TYPE
filename = paste(DATA_FOLDER, "Batch", BATCH,"_data.rda", sep="")
save(neg_data, neg_data.corrected, neg_data_levels, wt_fits_sigs_neg, pos_data, pos_data.corrected, pos_data_levels, wt_fits_sigs_pos, BATCH, strains, SIGN,
file=filename)
# # generate html output
library(rmarkdown)
output_file = paste(DATA_FOLDER,"Batch", BATCH,"_data.html", sep="")
all_plots_file =  paste(DATA_FOLDER, "allplotdata_", BATCH,".csv",sep="")
render('Stage1HTMLGenerator.Rmd',
output_file = output_file,
params = list(
all_plots_file=all_plots_file,
neg_data = neg_data,
neg_data.corrected = neg_data.corrected,
neg_data_levels = neg_data_levels,
wt_fits_sigs_neg = wt_fits_sigs_neg,
pos_data = pos_data,
pos_data.corrected = pos_data.corrected,
pos_data_levels = pos_data_levels,
wt_fits_sigs_pos = wt_fits_sigs_pos,
strains=strains
)
)
# Type of data (POS/NEG)
DATA_TYPE <- "POS"
# set the working directory
setwd('D:/R_Analysis/LCMS_SerumAnalysis-main - simple')
# Master input and output data folders
BATCH_DATA_INPUT_FOLDER <- "D:/R_Analysis/LC_MS_Data/ASKA"
BATCH_DATA_OUTPUT_FOLDER <- "D:/R_Analysis/output_files/ASKA"
# batch number
BATCH = 2
# common batch data output folder
DATA_FOLDER <- paste(BATCH_DATA_OUTPUT_FOLDER,"/Batch_",BATCH, "/",sep="")
# Importing data
data_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_", DATA_TYPE,"/Batch_", BATCH,"/Results.csv", sep="" )
runorder_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_", DATA_TYPE, "/Batch_", BATCH,"/RunOrder.csv", sep="" )
data <- read.csv(data_file, sep=";", dec=",", encoding="latin1")
run_order <- read.csv(runorder_file, sep=",", dec=",", skip=1)
data <- read.csv(data_file, sep=",", dec=",", encoding="latin1")
run_order <- read.csv(runorder_file, sep=",", dec=",", skip=1)
names(data)
# set the columns indexes, important!
first <- 28
last <- 133
# preprocess the files, making necessary corrections, ammendments and  get the strains
source("Preprocessor.KEIO.R")
# get the strains
strains <- detect_strains(run_order)
# slice target columns
data <- data[c(1:last)]
# normalize column names
results <- normalize_data(strains, data, run_order)
strains
View(data)
# slice target columns
data <- data[c(1:last)]
# normalize column names
results <- normalize_data(strains, data, run_order)
View(normalize_data)
View(normalize_data)
# normalize column names
results <- normalize_data(strains, data, run_order,first)
data = results[[1]]
run_order = results[[2]]
last = ncol(data)
# prepare the data for the batch above. Runs loess correction and fitting
source('PrepareData_single_noloess.R')
# prepare data to be submitted for rendering
neg_data <- NA
# prepare data to be submitted for rendering
neg_data <- NA
neg_data.corrected <- NA
neg_data_levels <- NA
wt_fits_sigs_neg <- NA
pos_data <- NA
pos_data.corrected <- NA
pos_data_levels <- NA
wt_fits_sigs_pos <- NA
if (DATA_TYPE == "NEG"){
neg_data <- data
neg_data.corrected <- data.corrected
neg_data_levels <- data_levels
wt_fits_sigs_neg <- wt_fits_sigs
}
if (DATA_TYPE == "POS"){
pos_data <- data
pos_data.corrected <- data.corrected
pos_data_levels <- data_levels
wt_fits_sigs_pos <- wt_fits_sigs
}
# save data
SIGN = DATA_TYPE
filename = paste(DATA_FOLDER, "Batch", BATCH,"_data.rda", sep="")
if (DATA_TYPE == "NEG"){
save(neg_data, neg_data.corrected, neg_data_levels, wt_fits_sigs_neg, BATCH, strains, SIGN,
file=filename)
}
if (DATA_TYPE == "POS"){
save(pos_data, pos_data.corrected, pos_data_levels, wt_fits_sigs_pos, BATCH, strains, SIGN,
file=filename)
}
# # generate html output
library(rmarkdown)
output_file = paste(DATA_FOLDER,"Batch", BATCH,"_data.html", sep="")
all_plots_file =  paste(DATA_FOLDER, "allplotdata_", BATCH,".csv",sep="")
render('Stage1HTMLGenerator.Rmd',
output_file = output_file,
params = list(
all_plots_file=all_plots_file,
neg_data = neg_data,
neg_data.corrected = neg_data.corrected,
neg_data_levels = neg_data_levels,
wt_fits_sigs_neg = wt_fits_sigs_neg,
pos_data = pos_data,
pos_data.corrected = pos_data.corrected,
pos_data_levels = pos_data_levels,
wt_fits_sigs_pos = wt_fits_sigs_pos,
strains=strains
)
)
# set the working directory
setwd('D:/R_Analysis/LCMS_SerumAnalysis-main - simple')
# Type of data (POS/NEG)
DATA_TYPE <- "POS"
# set the working directory
setwd('D:/R_Analysis/LCMS_SerumAnalysis-main - simple')
# Master input and output data folders
BATCH_DATA_INPUT_FOLDER <- "D:/R_Analysis/LC_MS_Data/ASKA"
BATCH_DATA_OUTPUT_FOLDER <- "D:/R_Analysis/output_files/ASKA"
# batch number
BATCH = 6
# common batch data output folder
DATA_FOLDER <- paste(BATCH_DATA_OUTPUT_FOLDER,"/Batch_",BATCH, "/",sep="")
# Importing data
data_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_", DATA_TYPE,"/Batch_", BATCH,"/Results.csv", sep="" )
runorder_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_", DATA_TYPE, "/Batch_", BATCH,"/RunOrder.csv", sep="" )
data <- read.csv(data_file, sep=",", dec=",", encoding="latin1")
data <- read.csv(data_file, sep=";", dec=",", encoding="latin1")
# Importing data
data_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_", DATA_TYPE,"/Batch_", BATCH,"/Results.csv", sep="" )
runorder_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_", DATA_TYPE, "/Batch_", BATCH,"/RunOrder.csv", sep="" )
data <- read.csv(data_file, sep=";", dec=",", encoding="latin1")
data <- read.csv(data_file, sep=",", dec=",", encoding="latin1")
run_order <- read.csv(runorder_file, sep=",", dec=",", skip=1)
names(data)
# For processing a single batch of either NEG or POS
# Important inputs
# DATA_TYPE : Type of data, POS or NEG
# DATA_FOLDER : The folder for saving generated files and intermediate data
# data_file : results csv file
# runorder_file: run order file
# first : 1st column in the results file with Area data
# last : last column in the results file with Area data
# Type of data (POS/NEG)
DATA_TYPE <- "POS"
# set the working directory
setwd('D:/R_Analysis/LCMS_SerumAnalysis-main - simple')
# Master input and output data folders
BATCH_DATA_INPUT_FOLDER <- "D:/R_Analysis/LC_MS_Data/ASKA"
BATCH_DATA_OUTPUT_FOLDER <- "D:/R_Analysis/output_files/ASKA"
# batch number
BATCH = 6
# common batch data output folder
DATA_FOLDER <- paste(BATCH_DATA_OUTPUT_FOLDER,"/Batch_",BATCH, "/",sep="")
# Importing data
data_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_", DATA_TYPE,"/Batch_", BATCH,"/Results.csv", sep="" )
runorder_file <- paste(BATCH_DATA_INPUT_FOLDER,"/ESI_", DATA_TYPE, "/Batch_", BATCH,"/RunOrder.csv", sep="" )
data <- read.csv(data_file, sep=",", dec=",", encoding="latin1")
run_order <- read.csv(runorder_file, sep=",", dec=",", skip=1)
# set the columns indexes, important!
first <- 30
last <- 141
# preprocess the files, making necessary corrections, ammendments and  get the strains
source("Preprocessor.KEIO.R")
# get the strains
strains <- detect_strains(run_order)
# slice target columns
data <- data[c(1:last)]
# normalize column names
results <- normalize_data(strains, data, run_order,first)
data = results[[1]]
run_order = results[[2]]
last = ncol(data)
# prepare the data for the batch above. Runs loess correction and fitting
source('PrepareData_single_noloess.R')
# save data
# filename = paste(DATA_FOLDER, "Batch", BATCH,"_data.rda", sep="")
# save(data, data.corrected, data_levels, wt_fits_sigs, BATCH, strains, SIGN,
#     file=filename)
# prepare data to be submitted for rendering
neg_data <- NA
neg_data.corrected <- NA
neg_data_levels <- NA
wt_fits_sigs_neg <- NA
pos_data <- NA
pos_data.corrected <- NA
pos_data_levels <- NA
wt_fits_sigs_pos <- NA
if (DATA_TYPE == "NEG"){
neg_data <- data
neg_data.corrected <- data.corrected
neg_data_levels <- data_levels
wt_fits_sigs_neg <- wt_fits_sigs
}
if (DATA_TYPE == "POS"){
pos_data <- data
pos_data.corrected <- data.corrected
pos_data_levels <- data_levels
wt_fits_sigs_pos <- wt_fits_sigs
}
# save data
SIGN = DATA_TYPE
filename = paste(DATA_FOLDER, "Batch", BATCH,"_data.rda", sep="")
if (DATA_TYPE == "NEG"){
save(neg_data, neg_data.corrected, neg_data_levels, wt_fits_sigs_neg, BATCH, strains, SIGN,
file=filename)
}
if (DATA_TYPE == "POS"){
save(pos_data, pos_data.corrected, pos_data_levels, wt_fits_sigs_pos, BATCH, strains, SIGN,
file=filename)
}
# # generate html output
library(rmarkdown)
output_file = paste(DATA_FOLDER,"Batch", BATCH,"_data.html", sep="")
all_plots_file =  paste(DATA_FOLDER, "allplotdata_", BATCH,".csv",sep="")
render('Stage1HTMLGenerator.Rmd',
output_file = output_file,
params = list(
all_plots_file=all_plots_file,
neg_data = neg_data,
neg_data.corrected = neg_data.corrected,
neg_data_levels = neg_data_levels,
wt_fits_sigs_neg = wt_fits_sigs_neg,
pos_data = pos_data,
pos_data.corrected = pos_data.corrected,
pos_data_levels = pos_data_levels,
wt_fits_sigs_pos = wt_fits_sigs_pos,
strains=strains
)
)
library(rmarkdown)
# input excel file
input_file = "D:\\R_Analysis\\Analytik\\Phase2\\Data\\Plate_1\\Compounds_POS_Plate1.xlsx"
# output folder
output_folder = "D:\\R_Analysis\\Analytik\\Phase2\\output\\Plate_1\\"
# output file generated by R
output_file = paste(output_folder, "Compounds_POS_Plate2.html", sep="")
# output file generate by Python
py_output_file = paste(output_folder, "Compounds_POS_Plate2_output.html", sep="")
library(readxl)
# read input file
data = read_excel(input_file)
View(data)
names(data)
library(rmarkdown)
library(readxl)
# input excel file
input_file = "D:\\R_Analysis\\Analytik\\Phase2\\Data\\Plate_1\\Compounds_POS_Plate1.xlsx"
# output folder
output_folder = "D:\\R_Analysis\\Analytik\\Phase2\\output\\Plate_1\\"
# output file generated by R
output_file = paste(output_folder, "Compounds_POS_Plate2.html", sep="")
# output file generate by Python
py_output_file = paste(output_folder, "Compounds_POS_Plate2_output.html", sep="")
# read input file
data = read_excel(input_file)
# file parameters
first_col = 28
last_col = ncol(data)
# filtering
maximum_level = 1
render('/Users/moosabonomali/Freelancer/SmartBio/Analytik/R/Analysis2/Phase2.Rmd',
output_file = output_file,
params = list(
input_file = input_file,
output_folder = output_folder,
output_file = output_file,
py_output_file = py_output_file,
first = first_col,
last = last_col,
level = maximum_level
)
)
render('D:\\R_Analysis\\Analytik\\Phase2\\R\\Phase2.Rmd',
output_file = output_file,
params = list(
input_file = input_file,
output_folder = output_folder,
output_file = output_file,
py_output_file = py_output_file,
first = first_col,
last = last_col,
level = maximum_level
)
)
library(rmarkdown)
library(readxl)
# input excel file
input_file = "D:\\R_Analysis\\Analytik\\Phase2\\Data\\Plate_1\\Compounds_POS_Plate1.xlsx"
# output folder
output_folder = "D:\\R_Analysis\\Analytik\\Phase2\\output\\Plate_1\\"
# output file generated by R
output_file = paste(output_folder, "Compounds_POS_Plate1.html", sep="")
# output file generate by Python
py_output_file = paste(output_folder, "Compounds_POS_Plate1_output.html", sep="")
# read input file
data = read_excel(input_file)
# file parameters
first_col = 28
last_col = ncol(data)
# filtering
maximum_level = 1
render('D:\\R_Analysis\\Analytik\\Phase2\\R\\Phase2.Rmd',
output_file = output_file,
params = list(
input_file = input_file,
output_folder = output_folder,
output_file = output_file,
py_output_file = py_output_file,
first = first_col,
last = last_col,
level = maximum_level
)
)
# Generate html file using python api
library(httr2)
all_plot_file <- paste(output_folder, "allplotdata.csv", sep="")
data <- list(
input_html_file = output_file,
output_html_file = py_output_file,
all_plot_file = all_plot_file,
strains = strains
)
req <- request("localhost:8000")
req <- req %>% req_headers("Accept" = "application/json")
req <- req %>% req_body_json(data)
req <- req %>% req_method("POST")
resp <- req_perform(req)
resp %>% resp_body_json()
library(rmarkdown)
library(readxl)
# input excel file
input_file = "D:\\R_Analysis\\Analytik\\Phase2\\Data\\Plate_1\\Compounds_POS_Plate1.xlsx"
# output folder
output_folder = "D:\\R_Analysis\\Analytik\\Phase2\\output\\Plate_1\\"
# output file generated by R
output_file = paste(output_folder, "Compounds_POS_Plate1.html", sep="")
# output file generate by Python
py_output_file = paste(output_folder, "Compounds_POS_Plate1_output.html", sep="")
# read input file
data = read_excel(input_file)
# file parameters
first_col = 28
last_col = ncol(data)
# filtering
maximum_level = 3
render('D:\\R_Analysis\\Analytik\\Phase2\\R\\Phase2.Rmd',
output_file = output_file,
params = list(
input_file = input_file,
output_folder = output_folder,
output_file = output_file,
py_output_file = py_output_file,
first = first_col,
last = last_col,
level = maximum_level
)
)
# Generate html file using python api
library(httr2)
all_plot_file <- paste(output_folder, "allplotdata.csv", sep="")
data <- list(
input_html_file = output_file,
output_html_file = py_output_file,
all_plot_file = all_plot_file,
strains = strains
)
req <- request("localhost:8000")
req <- req %>% req_headers("Accept" = "application/json")
req <- req %>% req_body_json(data)
req <- req %>% req_method("POST")
resp <- req_perform(req)
resp %>% resp_body_json()
library(rmarkdown)
library(readxl)
# input excel file
input_file = "D:\\R_Analysis\\Analytik\\Phase2\\Data\\Plate_2\\Compounds_POS_Plate2.xlsx"
# output folder
output_folder = "D:\\R_Analysis\\Analytik\\Phase2\\output\\Plate_2\\"
# output file generated by R
output_file = paste(output_folder, "Compounds_POS_Plate2.html", sep="")
# output file generate by Python
py_output_file = paste(output_folder, "Compounds_POS_Plate2_output.html", sep="")
# read input file
data = read_excel(input_file)
# file parameters
first_col = 28
last_col = ncol(data)
names(data)
# filtering
maximum_level = 3
render('D:\\R_Analysis\\Analytik\\Phase2\\R\\Phase2.Rmd',
output_file = output_file,
params = list(
input_file = input_file,
output_folder = output_folder,
output_file = output_file,
py_output_file = py_output_file,
first = first_col,
last = last_col,
level = maximum_level
)
)
# Generate html file using python api
library(httr2)
all_plot_file <- paste(output_folder, "allplotdata.csv", sep="")
data <- list(
input_html_file = output_file,
output_html_file = py_output_file,
all_plot_file = all_plot_file,
strains = strains
)
req <- request("localhost:8000")
req <- req %>% req_headers("Accept" = "application/json")
req <- req %>% req_body_json(data)
req <- req %>% req_method("POST")
resp <- req_perform(req)
resp %>% resp_body_json()
